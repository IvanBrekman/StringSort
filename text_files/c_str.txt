/*
    \brief  Функиця выводит строку на стандартное устройство вывода,
            также добавляет в конец строки '\n'.
    \param  [in] str указатель на строку (const char *)
    \return В случае успеха возвращает '\n' иначе EOF == -1
    \note   Лежит в stdio.h
*/
int puts(const char* str);



https://clc-wiki.net/wiki/C_standard_library:string.h:strchr
/*
    \brief  Ищет первое вхождение символа в строке.
    \param  [in] str указатель на строку
    \param  [in] c   искомый символ
    \return Указатель на первое вхождение в строке.
            Если символ не найден, то NULL.
    \note   Если передать ноль, в качестве c, то просто посчитает длину строки.
*/
char* strchr(const char *str, int c);


/*
    \brief  Считает длину строки.
    \param  [in] str указатель на строку
    \return Размер строки.
*/
int strlen(const char *str);


/*
    \brief  Копирует строку из src в dest
    \param  [in] dest указатель на память, куда будет скопирована строка
    \param  [in] src  указатель на оригинальную строку
    \return Возвращает dest
*/
char* strcpy(char* dest, const char* src);


/*
    \brief  Копирует из из src не более n символов в dest
    \param  [in] dest указатель на память, куда будет скопирована строка
    \param  [in] src  указатель на оригинальную строку
    \param  [in] n    число копируемых символов
    \return Возвращает dest
    \note   Данная функция не делает никаких проверок внутри себя.
    \note   Если длина строки src будет больше, чем n, то нужно будет
            дополнительно в dst прописать нулевой символ.
*/
char* strncpy(char* dest, const char* src, size_t n);


/*
    \brief  Функция добавляет к строке dst содержимое строки src
    \param  [in] dest указатель на память c первой строкой, которая будет
                      изменена.
    \param  [in] src  указатель на строку, которую требуется дописать к dst.
    \return Возвращает dst
    \note   Строка, которая лежит по dst изменяется!!!!
    \note   Данная функция не делает никаких проверок внутри себя.
    \note   Результирующий размер, который требуется: strlen(dst) + strlen(src) + 1
            так как будет дописан еще нулевой символ.
*/
char* strcat(char* dest, const char* src);


/*
    \brief  Функция добавляет к строке dst содержимое строки src, ограничивая
            число копируемых символов числом n.
    \param  [in] dest указатель на память c первой строкой, которая будет
                      изменена.
    \param  [in] src  указатель на строку, которую требуется дописать к dst.
    \param  [in] n    число копируемых символов
    \return Возвращает dst
    \note   Строка, которая лежит по dst изменяется!!!!
    \note   Данная функция не делает никаких проверок внутри себя.
    \note   Результирующий размер, который требуется: strlen(dst) + n + 1
            так как будет дописан еще нулевой символ.
*/
char* strcat(char* dest, const char* src);



/*
    \brief  Функция делает полную копию строки.
    \param  [in] str1 строка, которую нужно полностью скопировать (дублировать).
    \return Возвращает указатель на новую строку, которая будет иметь такое же
            содержание как и переданая строка. Если происходит ошибка, то возвращается
            NULL. А сам код оишбки можно посмотреть в errno.
    \note   Внутри функции происходит динамическое аллоцирование памяти, поэтому
            необходимо вызвать FREE применительно к указателю, который возвращает данная
            функция.
*/
char* strdup(const char* str1);


/*
    \brief  Считывает символы из stream и записывает в си-строку до тех пор, пока
            num-1 символ не считаются или не будет встречен '\n' или EOF.
    \param  [in] str указатель на массив char, куда будут записываться данные
    \param  [in] num максимальное число символов, которое будет скопировано
    \param  [in] stream указатель на структуру FILE
    \return В случае успеха возвращается str. В случае ошибки NULL.
    \note   Если при попытке чтения символа обнаруживается EOF, то устанавливается
            флаг eof внутри структуры FILE*. (Проверить установлен ли он можно структурой feof)
            Если же eof встретится до того, как будет прочитан хотя бы один символ, то возвращается NULL
*/
char* fgets (char* str, int num, FILE* stream);


https://dev.w3.org/libwww/Library/src/vms/getline.c
/*
    \brief  Считывает полностью строку из FILE* stream.
    \detail Считывает полностью строку из FILE* stream. Сохраняя адрес считанной строки
            в *lineptr. Буффер является нуль-терминированной строкой и __СОДЕРЖИТ__ символ '\n'
            если он встретился в строке.
    \param  [in] lineptr  УКАЗАТЕЛЬ на переменную типа char*, в которой хранится адресс буфера для записи
                          результата чтения.
    \param  [in] n        Указатель на size_t для хранения размера переданного буфера.
    \param  [in] stream   Указатель на структуру FILE
    \note   Если *lineptr установлен в NULL, перед вызовом функции, тогда функция аллоцирует память
            для строки. Эта память потом должна быть освобождена через FREE().
    \note   Если в *lineptr лежал уже указатель на буфер, полученный через malloc, и размера *n то в случае
            нехватки места для буфера будет выделано дополнительное место через realloc() и будет обновлено значение *n.
    \return Число реально прочитанных байт (нулевой символ не включается в подсчет). В случае ошибки возвращается -1,
            а код ошибки лежит в errno.
            
*/